/*********
  Complete project details at https://randomnerdtutorials.com
  
  This is an example for our Monochrome OLEDs based on SSD1306 drivers. Pick one up today in the adafruit shop! ------> http://www.adafruit.com/category/63_98
  This example is for a 128x32 pixel display using I2C to communicate 3 pins are required to interface (two I2C and one reset).
  Adafruit invests time and resources providing this open source code, please support Adafruit and open-source hardware by purchasing products from Adafruit!
  Written by Limor Fried/Ladyada for Adafruit Industries, with contributions from the open source community. BSD license, check license.txt for more information All text above, and the splash screen below must be included in any redistribution. 
*********/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_I2CDevice.h>


unsigned long prevMillis = 0;	// Used for timer thin
unsigned long curMillis = 0;
unsigned long lastActionMillis = 0;

int catXPos =  0;		 // Current cat X position
bool catWay = true;		 // True mean right , false mean left
int catState = 0;		 // Current state of the cat

unsigned long lastAction = 0;	// Time since a last action was done
int lastActionLenght = 5000;

bool newFrame = false;	// If yes or no a new frame is needed


#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2




#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

  static const unsigned char PROGMEM logo_bmp2[] =
{ B00111000, B11000000,
  B00000001, B11000000,
  B01111101, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10000011,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B10000000,
  B11111000, B01110000,
  B11111111, B00110000 };

// 'catTest', 128x64px
static const unsigned char  PROGMEM catTest [] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x18, 0x1f, 0xff, 0xff, 0xf8, 0x08, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1c, 0x0f, 0xff, 0xff, 0xf0, 0x18, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1e, 0x07, 0xff, 0xff, 0xe0, 0x38, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x03, 0xff, 0xff, 0xc0, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x81, 0xff, 0xff, 0x80, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0x00, 0x00, 0x01, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xe0, 0x00, 0x00, 0x03, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0x80, 0x00, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfe, 0xdf, 0xfb, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfd, 0xef, 0xf7, 0xbf, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfd, 0xef, 0xf7, 0xbf, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xfd, 0xef, 0xf7, 0xbf, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xfd, 0xef, 0xf7, 0xbf, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xfd, 0xef, 0xf7, 0xbf, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xfe, 0x7f, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xfe, 0x7f, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xfe, 0x7f, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xf0, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xf8, 0x1f, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xfc, 0x3f, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xfe, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'cat_exasp', 60x60px
const unsigned char  PROGMEM cat_exasp []= {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x01, 0xe0, 0x78, 0x00, 0x7f, 0xc0, 0x3f, 0xe0, 0x01, 0xe0, 
	0x78, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x01, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0xff, 0xf0, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_happy', 60x60px
const unsigned char PROGMEM cat_happy [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x0c, 0xc0, 0x33, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x18, 0x60, 0x61, 0x80, 0x01, 0xf0, 
	0xf8, 0x00, 0x18, 0x60, 0x61, 0x80, 0x01, 0xf0, 0xff, 0xf0, 0x18, 0x60, 0x61, 0x80, 0xff, 0xf0, 
	0xff, 0xf8, 0x18, 0x60, 0x61, 0x81, 0xff, 0xf0, 0xff, 0xf0, 0x18, 0x60, 0x61, 0x80, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x3f, 0xc0, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x1f, 0x80, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x0f, 0x00, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_left', 60x60px
const unsigned char  PROGMEM cat_left []= {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0xbf, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x9f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x8f, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x87, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x83, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x81, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0xff, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x7f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x3b, 0xfe, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x1b, 0xfe, 0xff, 0x80, 0x1e, 0x00, 
	0x07, 0x80, 0x1b, 0x76, 0xfc, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x1b, 0x76, 0xf0, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x1b, 0x76, 0xf0, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x0b, 0x76, 0xe0, 0x00, 0x1f, 0xc0, 
	0x7e, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0f, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x18, 0x00, 0x60, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x18, 0x00, 0x60, 0x00, 0x01, 0xf0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 
	0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x78, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xe0, 0x00, 0x30, 0x00, 0x07, 0xff, 0xe0, 
	0x7f, 0xf0, 0x00, 0x30, 0x00, 0x0f, 0xff, 0xe0, 0x7f, 0xe0, 0x00, 0x30, 0x00, 0x07, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x48, 0x00, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x84, 0x00, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x01, 0x02, 0x00, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x02, 0x01, 0x00, 0x01, 0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xf0, 0x00, 
	0x00, 0x7f, 0xc0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_neutral', 60x60px
const unsigned char PROGMEM cat_neutral [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x10, 0x80, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x20, 0x40, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x40, 0x20, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_right', 60x60px
const unsigned char PROGMEM cat_right [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0xde, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x9e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7f, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfe, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xfc, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf8, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xf0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xf7, 0xfd, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x1f, 0xf7, 0xfd, 0x80, 0x1e, 0x00, 
	0x07, 0x80, 0x03, 0xf6, 0xed, 0x80, 0x1e, 0x00, 0x0f, 0x80, 0x00, 0xf6, 0xed, 0x80, 0x1f, 0x00, 
	0x1f, 0x80, 0x00, 0xf6, 0xed, 0x80, 0x1f, 0x80, 0x3f, 0x80, 0x00, 0x76, 0xed, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0x60, 0x01, 0x80, 0x01, 0xe0, 0x78, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xe0, 0xf8, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x60, 0x01, 0x80, 0x01, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x01, 0xe0, 0x7f, 0xfe, 0x00, 0x00, 0xc0, 0x00, 0x7f, 0xe0, 
	0x7f, 0xff, 0x00, 0x00, 0xc0, 0x00, 0xff, 0xe0, 0x7f, 0xfe, 0x00, 0x00, 0xc0, 0x00, 0x7f, 0xe0, 
	0x3f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x01, 0x20, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x02, 0x10, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x04, 0x08, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x08, 0x04, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_sad', 60x60px
const unsigned char PROGMEM cat_sad [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x07, 0x80, 0x1e, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x03, 0x00, 0x0c, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x30, 0xc0, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x30, 0xc0, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x30, 0xc0, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x30, 0xc0, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x30, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2976)
const int epd_bitmap_allArray_LEN = 6;
const unsigned char* epd_bitmap_allArray[6] = {
	cat_exasp,
	cat_happy,
	cat_left,
	cat_neutral,
	cat_right,
	cat_sad
};




void testdrawrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testfillrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=3) {
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}



void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);

  display.clearDisplay();

  display.drawBitmap(0,1,catTest, 128, 64, 1);
  display.display();
  delay(3000);
  display.clearDisplay();

  display.drawBitmap(0,1,cat_happy, 60, 60, 1);
  display.display();
  delay(3000);display.clearDisplay();

  display.drawBitmap(0,1,cat_left, 60, 60, 1);
  display.display();
  delay(3000);

  display.clearDisplay();

  display.drawBitmap(0,1,cat_right, 60, 60, 1);
  display.display();
  delay(3000);
	loop();

}

static void LeftToRight(void)
{
	if (curMillis - prevMillis >= 200)
	{
		newFrame = true;
	
	} else{
		newFrame = false;
	}

	
	if (curMillis - prevMillis >= 200 && catWay == true)
	{
		prevMillis = millis();
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_right, 60, 60, 1);
		display.display();
		catXPos++;
		if (catXPos > 68)
		{
			catWay = false;
		}
	} else if (curMillis - prevMillis >= 200 && catWay == false)
	{
		prevMillis = millis();
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_left, 60, 60, 1);
		display.display();
		catXPos--;
		if (catXPos <= 0)
		{
			catWay = true;
		}
	}

}

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h)
 {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);
  }

  for(;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, WHITE);
    }

    display.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}















void setup() {
  Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // ==== Variable setup =====
  catXPos = 35;		// Set the initial cat position on the screen

}





void loop() 
{
	curMillis = millis();
	
	

	if (lastAction >= lastActionLenght)
	{
		LeftToRight();
	}else
	{
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_happy, 60, 60, 1);
		display.display();
	}
	
	
	lastAction = lastAction + (millis() - curMillis); 

}