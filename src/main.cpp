/*********\
 * DeskPet
 * 
 * NOTE: im currentrly setting hand state in the ultrasound function
 * 
*********/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_I2CDevice.h>
#include <NewPing.h>


unsigned long frameMillis = 0;	// Used for timer thing
unsigned long curMillis = 0;




/* NOTE:
	Cat state: 
	0:
	1: Happy
	2: Wandering aroung
	3: :| face . 


	
*/

// ==== Cat related stuff ====
int catXPos =  0;		 // Current cat X position
bool catWay = true;		 // True mean right , false mean left
int catState = 1;		 // Current state of the cat
unsigned long lastActionSince = 0;	// Time since a last action was done on cat
unsigned long lastAction = 0;
#define lastActionLenght 4000	// Time it take before it triger wandering
bool newFrame = false;	// If yes or no a new frame is needed






// ===== Ultrasound sensor ====

#define ECHO_PIN 11 // attach pin D2 Arduino to pin Echo of HC-SR04
#define TRIGGER_PIN 12 //attach pin D3 Arduino to pin Trig of HC-SR04
#define MAX_DISTANCE 50 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

unsigned int pingSpeed = 50; // How frequently are we going to send out a ping (in milliseconds). 50ms would be 20 times a second.
unsigned long pingTimer;     // Holds the next ping time.
byte handDistance = 0;		// Hold hand distance in cm
byte handState = 0;			// Will hold hand state like example 1 is petting 2 is near 3 is away 


// defines variables

unsigned long lastHandAction = 0;
unsigned long handActionDuration = 0;
bool handPresent = false;



#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2




#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#define SPRITE_HEIGHT   60
#define SPRITE_WIDTH    60

// 'cat_exasp', 60x60px
const unsigned char  PROGMEM cat_exasp []= {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x01, 0xe0, 0x78, 0x00, 0x7f, 0xc0, 0x3f, 0xe0, 0x01, 0xe0, 
	0x78, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x01, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0xff, 0xf0, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_happy', 60x60px
const unsigned char PROGMEM cat_happy [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x0c, 0xc0, 0x33, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x18, 0x60, 0x61, 0x80, 0x01, 0xf0, 
	0xf8, 0x00, 0x18, 0x60, 0x61, 0x80, 0x01, 0xf0, 0xff, 0xf0, 0x18, 0x60, 0x61, 0x80, 0xff, 0xf0, 
	0xff, 0xf8, 0x18, 0x60, 0x61, 0x81, 0xff, 0xf0, 0xff, 0xf0, 0x18, 0x60, 0x61, 0x80, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x3f, 0xc0, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x1f, 0x80, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x0f, 0x00, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_left', 60x60px
const unsigned char  PROGMEM cat_left []= {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0xbf, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x9f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x8f, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x87, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x83, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x81, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0xff, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x7f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x3b, 0xfe, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x1b, 0xfe, 0xff, 0x80, 0x1e, 0x00, 
	0x07, 0x80, 0x1b, 0x76, 0xfc, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x1b, 0x76, 0xf0, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x1b, 0x76, 0xf0, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x0b, 0x76, 0xe0, 0x00, 0x1f, 0xc0, 
	0x7e, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0f, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x18, 0x00, 0x60, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x18, 0x00, 0x60, 0x00, 0x01, 0xf0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 
	0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x78, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xe0, 0x00, 0x30, 0x00, 0x07, 0xff, 0xe0, 
	0x7f, 0xf0, 0x00, 0x30, 0x00, 0x0f, 0xff, 0xe0, 0x7f, 0xe0, 0x00, 0x30, 0x00, 0x07, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x48, 0x00, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x84, 0x00, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x01, 0x02, 0x00, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x02, 0x01, 0x00, 0x01, 0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xf0, 0x00, 
	0x00, 0x7f, 0xc0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_neutral', 60x60px
const unsigned char PROGMEM cat_neutral [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x10, 0x80, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x20, 0x40, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x40, 0x20, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_right', 60x60px
const unsigned char PROGMEM cat_right [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0xde, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x9e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7f, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfe, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xfc, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf8, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xf0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xf7, 0xfd, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x1f, 0xf7, 0xfd, 0x80, 0x1e, 0x00, 
	0x07, 0x80, 0x03, 0xf6, 0xed, 0x80, 0x1e, 0x00, 0x0f, 0x80, 0x00, 0xf6, 0xed, 0x80, 0x1f, 0x00, 
	0x1f, 0x80, 0x00, 0xf6, 0xed, 0x80, 0x1f, 0x80, 0x3f, 0x80, 0x00, 0x76, 0xed, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0x60, 0x01, 0x80, 0x01, 0xe0, 0x78, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xe0, 0xf8, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x60, 0x01, 0x80, 0x01, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x01, 0xe0, 0x7f, 0xfe, 0x00, 0x00, 0xc0, 0x00, 0x7f, 0xe0, 
	0x7f, 0xff, 0x00, 0x00, 0xc0, 0x00, 0xff, 0xe0, 0x7f, 0xfe, 0x00, 0x00, 0xc0, 0x00, 0x7f, 0xe0, 
	0x3f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x01, 0x20, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x02, 0x10, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x04, 0x08, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x08, 0x04, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_sad', 60x60px
const unsigned char PROGMEM cat_sad [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x07, 0x80, 0x1e, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x03, 0x00, 0x0c, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x30, 0xc0, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x30, 0xc0, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x30, 0xc0, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x30, 0xc0, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x30, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'cat_O', 60x60px
const unsigned char PROGMEM cat_O [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
	0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
	0x07, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x00, 0x0f, 0xde, 0x00, 
	0x07, 0x9f, 0x80, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x07, 0x8f, 0xc0, 0x00, 0x00, 0x3f, 0x1e, 0x00, 
	0x07, 0x87, 0xe0, 0x00, 0x00, 0x7e, 0x1e, 0x00, 0x07, 0x83, 0xf0, 0x00, 0x00, 0xfc, 0x1e, 0x00, 
	0x07, 0x81, 0xf8, 0x00, 0x01, 0xf8, 0x1e, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x00, 
	0x07, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x1e, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x1e, 0x00, 
	0x07, 0x80, 0x1f, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 
	0x07, 0x80, 0x0f, 0x7f, 0xef, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x00, 
	0x1f, 0x80, 0x07, 0x76, 0xee, 0x00, 0x1f, 0x80, 0x3f, 0x80, 0x03, 0x76, 0xec, 0x00, 0x1f, 0xc0, 
	0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 
	0x78, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x07, 0x80, 0x1e, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x01, 0xf0, 
	0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x7f, 0xfc, 0x00, 0x06, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x06, 0x00, 0x01, 0xff, 0xe0, 
	0x3f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 
	0x0f, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 0x00, 0x07, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0xfe, 0x00, 
	0x03, 0xf8, 0x00, 0x7f, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x7f, 0xe0, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xf0, 0x3f, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x80, 0x06, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





void testdrawbitmap(void) 
{
  
 if (handState == 1)
 {
	display.clearDisplay();
  display.drawBitmap(catXPos,1,cat_happy, SPRITE_HEIGHT, SPRITE_WIDTH, 1);
  display.display();
 }
 if (handState == 2)
 {
	display.clearDisplay();
  display.drawBitmap(catXPos,1,cat_O, SPRITE_HEIGHT, SPRITE_WIDTH, 1);
  display.display();
 }
 
	
	  
  
 

}

static void LeftToRight(void)
{
	if (curMillis - frameMillis >= 200)
	{
		newFrame = true;
	
	} else{
		newFrame = false;
	}

	
	if (curMillis - frameMillis >= 200 && catWay == true)
	{
		frameMillis = millis();
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_right, 60, 60, 1);
		display.display();
		catXPos++;
		if (catXPos > 68)
		{
			catWay = false;
		}
	} else if (curMillis - frameMillis >= 200 && catWay == false)
	{
		frameMillis = millis();
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_left, 60, 60, 1);
		display.display();
		catXPos--;
		if (catXPos <= 0)
		{
			catWay = true;
		}
	}

}

static void HappyCat(void)
{
	
		display.clearDisplay();
		display.drawBitmap(catXPos, 1, cat_happy, 60, 60, 1);
		display.display();
}



static void UltraSound(void)
{

  if (sonar.check_timer())
   { // This is how you check to see if the ping was received.
    // Here's where you can add code.
	handDistance = sonar.ping_result / US_ROUNDTRIP_CM;	// Put the distance in cm in the hand distance
  }

}

static void HandState(void)
{
	
	
	if (handDistance <= 15)
	{
		if (handPresent == false)
		{
			lastHandAction = curMillis;
		}
		handPresent = true;
		handActionDuration = curMillis - lastHandAction;

		if ((handDistance < 6) && (handActionDuration > 400))
		{
			handState = 1;
			lastHandAction = curMillis;
			handActionDuration = 0;
		}else if(((handDistance >= 6)&&(handDistance < 13)) && (handActionDuration > 400))
		{
			handState = 2;
			lastHandAction = curMillis;
			handActionDuration = 0;
		}
	}else
	{
		handState = 3;
		handActionDuration = 0;
		handPresent = false;
	}


}












void setup() {
  	Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
 	 if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) 
	{ 
  		  Serial.println(F("SSD1306 allocation failed"));
    	for(;;); // Don't proceed, loop forever
 	 }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  	display.display();
  	delay(2000); // Pause for 2 seconds

  // ==== Variable setup =====
	catXPos = 35;		// Set the initial cat position on the screen


// ---- Ultrasound sensor setup ----
pingTimer = millis(); // Start now.




}






void loop() 
{
	curMillis = millis();


	// Will check if a hand is over the sensor
	// Notice how there's no delays in this sketch to allow you to do other processing in-line while doing distance pings.
  if (millis() >= pingTimer)// pingSpeed milliseconds since last ping, do another ping.
  {   
    pingTimer += pingSpeed;      // Set the next ping time.
    sonar.ping_timer(UltraSound); // Send out the ping, calls "echoCheck" function every 24uS where you can check the ping status. and get the hand status
  }
  // Do other stuff here, really. Think of it as multi-tasking.




	switch (catState)
	{
	case 1:
		HappyCat();
		break;
	
	case 2:
		LeftToRight();
		break;

	case 3:
		testdrawbitmap();
		break;

	default:
		break;
	}

	


	// Will put the cat in wandering mode if no action is done .
	if (lastActionSince >= lastActionLenght)
	{
		catState = 2;
	}

	switch (handState)
	{
	case 1:
		catState = 3;
		lastAction = millis();
		break;

	case 2:
		catState = 3;
		lastAction = millis();
		break;

	case 3:
		/* code */
		break;
	
	default:
		break;
	}

	
	lastActionSince = millis() - lastAction; 
	
HandState();



// DEBUGER:
	Serial.print("Hand State: ");
	Serial.print(handState);
	
	Serial.print(" Distance: ");
	Serial.print(handDistance);
	Serial.print("  Duration: ");
	Serial.print(handActionDuration);
	Serial.print("  Last action since: ");
	Serial.println(lastActionSince);

}